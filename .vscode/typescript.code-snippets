{
	"Create DataSet slice": {
		"scope": "typescript",
		"prefix": "dataSlice",
		"body": [
			"import { createSlice } from \"@reduxjs/toolkit\";",
			"import type { PayloadAction } from \"@reduxjs/toolkit\";",
			"import { upsert } from \"@/utils/arrayUtils\";",
			"import cloneDeep from \"lodash.clonedeep\";",
			"import { ${1:typeName} } from \"@/types/data/${2:importFile}\";",
			"",
			"export type ${1:typeName}DataSetState = {",
			"  latest: ${1:typeName}[];",
			"  initial: ${1:typeName}[];",
			"};",
			"",
			"const initialState: ${1:typeName}DataSetState = {",
			"  latest: [],",
			"  initial: [],",
			"};",
			"",
			"export const ${3:slicePrefix}DataSetSliceSlice = createSlice({",
			"  name: \"${3:slicePrefix}DataSet\",",
			"  initialState,",
			"  reducers: {",
			"    set${4:plural}: (state, action: PayloadAction<${1:typeName}[]>) => {",
			"      state.latest = [...action.payload];",
			"    },",
			"    upsert${1:typeName}: (state, action: PayloadAction<${1:typeName}>) => {",
			"      state.latest = upsert(action.payload, state.latest, a => a.id === action.payload.id);",
			"    },",
			"    delete${1:typeName}: (state, action: PayloadAction<string>) => {",
			"      state.latest = state.latest.filter(a => a.id !== action.payload);",
			"    },",
			"    setInitial: (state, action: PayloadAction<${1:typeName}[]>) => {",
			"      state.initial = cloneDeep(action.payload);",
			"    },",
			"    resetState: (state) => {",
			"      state.latest = cloneDeep(state.initial);",
			"    },",
			"  },",
			"});",
			"",
			"export const {",
			"  set${4:plural},",
			"  upsert${1:typeName},",
			"  delete${1:typeName},",
			"  resetState,",
			"  setInitial,",
			"} = ${3:slicePrefix}DataSetSliceSlice.actions;",
			""
		],
		"description": "Create a base slice for a data set"
	},
	"Create DataSet component": {
		"scope": "typescriptreact",
		"prefix": "dataSet",
		"body": [
			"import DataGrid from \"@/components/dataGrid/DataGrid\";",
			"import { useAppDispatch, useAppSelector } from \"@/redux/hooks\";",
			"import { ${1:type} } from \"@/types/data/${2:file}\";",
			"import { Box } from \"@chakra-ui/react\";",
			"import { JSX } from \"react\";",
			"import { delete${1:type}, resetState, set${4:plural}, upsert${1:type} } from \"./${3:slice}DataSetSlice\";",
			"import { Icon } from \"@/types/data/icon\";",
			"import { v4 as uuidv4 } from \"uuid\";",
			"",
			"const ${4:plural}DataSet = (): JSX.Element => {",
			"  const ${3:slice} = useAppSelector(state => state.${3:slice}DataSet.latest);",
			"  const dispatch = useAppDispatch();",
			"",
			"  const handleGetId = (item: ${1:type}) => {",
			"    return item.id;",
			"  };",
			"",
			"  const handleStringValueChanged = (item: ${1:type}, columnKey: keyof ${1:type}, value: string) => {",
			"    let newItem: ${1:type} | undefined;",
			"    switch (columnKey) {",
			"      case \"prop\":",
			"        newItem = { ...item, prop: value };",
			"        break;",
			"      default:",
			"        break;",
			"    }",
			"",
			"    if (newItem) {",
			"      dispatch(upsert${1:type}(newItem));",
			"    }",
			"  };",
			"",
			"  const handleNumberValueChanged = (item: ${1:type}, columnKey: keyof ${1:type}, value: number) => {",
			"    let newItem: ${1:type} | undefined;",
			"    switch (columnKey) {",
			"      case \"prop\":",
			"        newItem = { ...item, prop: value };",
			"        break;",
			"      default:",
			"        break;",
			"    }",
			"",
			"    if (newItem) {",
			"      dispatch(upsert${1:type}(newItem));",
			"    }",
			"  };",
			"",
			"  const handleIconValueChanged = (item: ${1:type}, key: keyof ${1:type}, value: Icon) => {",
			"    if (key === \"icon\") {",
			"      dispatch(upsert${1:type}({ ...item, icon: value }));",
			"    }",
			"  };",
			"",
			"  const handleAddRow = () => {",
			"    dispatch(set${4:plural}([",
			"      ...${3:slice},",
			"      {",
			"        id: uuidv4(),",
			"      },",
			"    ]));",
			"  };",
			"",
			"  const handleDeleteRow = (item: ${1:type}) => {",
			"    dispatch(delete${1:type}(item.id));",
			"  };",
			"",
			"  const handleRevertAllChanges = () => {",
			"    dispatch(resetState());",
			"  };",
			"",
			"  const handleGetFriendlyName = (item: ${1:type}) => {",
			"    return item.name.length === 0 ? \"Unknown\" : item.name;",
			"  };",
			"",
			"  return (",
			"    <Box display={\"flex\"} justifyContent={\"center\"}>",
			"      <DataGrid",
			"        items={${3:slice}}",
			"        columnInfo={[",
			"          {",
			"            name: \"prop1\",",
			"            key: \"prop1\",",
			"            type: \"text\",",
			"          },",
			"          {",
			"            name: \"prop2\",",
			"            key: \"prop2\",",
			"            type: \"number\",",
			"          },",
			"          {",
			"            name: \"Icon\",",
			"            key: \"icon\",",
			"            type: \"icon\",",
			"          },",
			"        ]}",
			"        getId={handleGetId}",
			"        getFriendlyName={handleGetFriendlyName}",
			"        onStringValueChange={handleStringValueChanged}",
			"        onNumberValueChange={handleNumberValueChanged}",
			"        onIconValueChange={handleIconValueChanged}",
			"        onAddRow={handleAddRow}",
			"        onDeleteRow={handleDeleteRow}",
			"        onRevertAllChanges={handleRevertAllChanges}",
			"      />",
			"    </Box>",
			"  );",
			"};",
			"",
			"export default ${4:plural}DataSet;",
			"",
		],
		"description": "Create a base data set component"
	},
	"Create useImport import line": {
		"scope": "typescriptreact",
		"prefix": "useImport-import",
		"body": "import { resetState as reset${1:AsName}State, setInitial as setInitial${1:AsName} } from \"@/features/dataSets/${2}\";",
		"description": "Create the import in useImport for a new slice"
	},
	"Create useImport if block": {
		"scope": "typescriptreact",
		"prefix": "useImport-if",
		"body": [
			"if (saveFile?.data?.${2:fileProp}) {",
			"  dispatch(setInitial${1:AsName}(saveFile.data.${2:fileProp}));",
			"}",
			"dispatch(reset${1:AsName}State());",
			""
		],
		"description": "Create the import in useImport for a new slice"
	},
}